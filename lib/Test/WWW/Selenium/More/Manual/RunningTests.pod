package Test::WWW::Selenium::Manual::RunningTests;

=head1 NAME

Test::WWW::Selenium::Manual::RunningTests

=head1 RUNNING SELENIUM TESTS

This section describes setting up and running Selenium Perl tests on the command
line.  There are 3 steps to making this work:

=over 4

=item 1. Start your web application

=item 2. Start the Selenium server

=item 3. Run your Perl tests

=back

The only tricky part is configuring the right servers and ports so all 3
components talk to each other.  This is done either with the options you pass
to Test::WWW::Selenium->new() (see L<WWW::Selenium>) or with the environment
variables described in ...?

=head1 EXAMPLES

These examples assume the web application you want to test is running on
localhost port 5000.  

Basic setup

    # Start the Selenium server
    java -jar selenium-server.jar -port 4444 -trustAllSSLCertificates -browserSessionReuse

    # Run your tests against localhost (port 5000)
    prove -lrv t/test.t


Headless server setup

    # Start Xvfb so you can run a web browser without X Windows
    Xvfb :99

    # Start the Selenium server
    DISPLAY=:99 java -jar selenium-server.jar -port 4444 -trustAllSSLCertificates -browserSessionReuse

    # Run your tests: 
    prove -lrv t/test.t


Run Selenium tests against a remote website

    SELENIUM_BROWSER_URL=http://example.com prove -lrv t/test.t


Run tests against a remote Selenium server

    # Start the Selenium server on the remote host (lets say 99.99.99.99).  
    # Then run your tests locally like this:
    SELENIUM_HOST=99.99.99.99 prove -lrv t/test.t


Running tests slowly

    # Tests fly by too fast sometimes.  This slows things down.  It basically
    # calls sleep after every call to the Selenium server
    SELENIUM_SLEEP=1 prove -lrv t/test.t



=head1 SEE ALSO 

The ENVIRONMENT VARIABLES section of Test::WWW::Selenium documentation.  

The command line options for the Selenium server

    java -jar selenium-server.jar -h


=cut
